import sys
from src.logger import logging

def error_message_detail(error,error_detail:sys):
    _,_,exc_tb=error_detail.exc_info()
    file_name=exc_tb.tb_frame.f_code.co_filename
    error_message="Error occured in python script name [{0}] line number [{1}] error message[{2}]".format(
     file_name,exc_tb.tb_lineno,str(error))

    return error_message

    

class CustomException(Exception):
    def __init__(self,error_message,error_detail:sys):
        super().__init__(error_message)
        self.error_message=error_message_detail(error_message,error_detail=error_detail)
    
    def __str__(self):
        return self.error_message
    


# This function takes two arguments: error, which is the exception instance, and error_detail, which is expected to be the sys module.
# error_detail.exc_info() fetches information about the most recent exception caught by an except clause. It returns a tuple of three values: the exception type, the exception instance, and a traceback object.
# exc_tb is the traceback object, which contains information about the stack frames at the point where the exception was raised.
# file_name extracts the filename from the traceback.
# error_message is a formatted string that includes the filename, the line number where the error occurred, and the error message itself.
# The function returns this formatted error message.   
# CustomException is a subclass of Python's built-in Exception class. It is used to create custom exceptions with more detailed error messages.
# The __init__ method initializes the custom exception. It takes two arguments: error_message (a brief description of the error) and error_detail (expected to be the sys module).
# super().__init__(error_message) initializes the base Exception class with the provided error message.
# self.error_message is assigned the detailed error message generated by the error_message_detail function.
# The __str__ method is overridden to return the detailed error message when the exception is converted to a string.     